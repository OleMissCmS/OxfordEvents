import streamlit as st
from datetime import datetime, timedelta
import time
from scrapers import scrape_all_events
from dedupe import deduplicate_events
from categories import categorize_event
from calendar import create_ics_download_link, ical_to_bytes
from utils import is_upcoming

# Ole Miss Colors
REBEL_RED = "#C8102E"
NAVY = "#13294B"
CARDINAL = "#8C1515"
LIGHT_GRAY = "#F8F9FA"

st.set_page_config(page_title="Upcoming in Oxford", page_icon="🏛️", layout="wide")

# CSS (same as before)
st.markdown(f"""
<style>
    /* [SAME CSS FROM PREVIOUS - 85 lines, copy exactly] */
    .main .block-container {{ padding-top: 2rem; background: linear-gradient(135deg, {LIGHT_GRAY} 0%, #f0f4f8 100%); }}
    .header {{ background: linear-gradient(135deg, {REBEL_RED} 0%, {CARDINAL} 100%); padding: 2rem; border-radius: 15px; color: white; text-align: center; margin-bottom: 2rem; box-shadow: 0 10px 30px rgba(200,16,46,0.3); }}
    .metric-card {{ background: white; padding: 1.5rem; border-radius: 15px; box-shadow: 0 5px 15px rgba(0,0,0,0.08); border-left: 5px solid {REBEL_RED}; }}
    .event-card {{ background: white; padding: 1.5rem; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.06); margin: 1rem 0; border-left: 4px solid {CARDINAL}; }}
    .category-badge {{ padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.85rem; font-weight: 600; color: white; }}
</style>
""", unsafe_allow_html=True)

@st.cache_data(ttl=900)
def load_events():
    """Load & process all events"""
    with st.spinner('🔍 Scraping 12+ sources...'):
        all_events = scrape_all_events()
        unique_events = deduplicate_events(all_events)
    return unique_events

def main():
    st.markdown(f"""
    <div class="header">
        <h1 style="margin: 0; font-size: 3rem;">🏛️ Upcoming in Oxford</h1>
        <p style="font-size: 1.2rem;">Ole Miss & Oxford events • Next 3 weeks</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Load events
    unique_events = load_events()
    
    # Metrics
    col1, col2, col3 = st.columns(3)
    with col1: st.metric("Total Events", len(unique_events))
    with col2: st.metric("Active Sources", len(set(e['source'] for e in unique_events)))
    with col3: st.metric("Next 3 Weeks", sum(1 for e in unique_events if is_upcoming(e['date'])))
    
    # Filters
    col1, col2 = st.columns(2)
    with col1:
        categories = ['All'] + sorted(set(categorize_event(e['name']) for e in unique_events))
        selected_category = st.selectbox("Category", categories)
    with col2:
        date_range = st.date_input("Date Range", value=(datetime.now().date(), datetime.now().date() + timedelta(days=21)))
    
    # Filter & display
    filtered = []
    start, end = date_range
    for e in unique_events:
        cat = categorize_event(e['name'])
        if (selected_category == 'All' or cat == selected_category) and is_upcoming(e['date']):
            filtered.append({**e, 'category': cat})
    
    filtered.sort(key=lambda x: x.get('date', ''))
    
    if filtered:
        st.markdown("## 📅 Upcoming Events")
        for i, event in enumerate(filtered[:25]):
            col_left, col_right = st.columns([3, 1])
            with col_left:
                st.markdown(f"""
                <div class="event-card">
                    <h3 style="color: {NAVY};">{event['name']}</h3>
                    <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                        <span style="color: {CARDINAL};">📅 {event['date'] or 'TBD'}</span>
                        <span>📍 {event['location']}</span>
                        <span class="category-badge" style="background: linear-gradient(135deg, {REBEL_RED} 0%, {CARDINAL} 100%);">{event['category']}</span>
                    </div>
                    <div style="margin-top: 0.5rem; font-size: 0.9rem; color: #666;">
                        📰 {event['source']}
                    </div>
                </div>
                """, unsafe_allow_html=True)
            with col_right:
                st.markdown(create_ics_download_link(event), unsafe_allow_html=True)
    else:
        st.info("🔍 No events match filters")
    
    # Footer
    st.markdown("---")
    st.markdown(f"**Last updated:** {datetime.now().strftime('%B %d, %Y %I:%M %p')} | 12+ sources")

if __name__ == "__main__":
    main()
